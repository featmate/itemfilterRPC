syntax = "proto3";
package itemfilterRPC;
import "pbschema/protoc-gen-openapiv2/options/annotations.proto";
// import "google/api/httpbody.proto";
option go_package = "./itemfilterRPC_pb";

enum RedisFilterType {
    SET = 0;
    BLOOM = 1;
    CUCKOO = 2;
}
message RedisFilterMeta{
    string ID = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "对象ID,请求时不填则自动生成"
    }];
    string EntitySourceType = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "对象针对的实体类型"
    }];
    string Name = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "对象名,创建上下文或picker时不用填"
    }];
    string Desc = 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "对象描述,创建上下文或picker时不用填"
    }];
    string Key = 5[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "对象保存的key,请求创建时不填"
    }];
}
message RedisFilterStatus{
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "RedisFilterInfo"
            description: "过滤器配置信息"
            required: ["Exists","Capacity","Size"]
        }
    };
    bool Exists = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "filter是否存在"
    }];
    int64 Size = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "当前容量"
    }];
    int64 TTLSeconds = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "当前剩余时间,单位s"
    }];
}
message SetFilterSetting{
    int64 MaxTTLSeconds = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "保存key的最大过期秒数"
    }];
}
message BloomFilterSetting{
    int64 Capacity = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "最大容量"
    }]; 
    double ErrorRate = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "碰撞率,碰撞率设置的越低使用的hash函数越多,使用的空间也越大,检索效率也越低"
    }];
    int64 Expansion = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "扩容倍数"
    }]; 
    bool NonScaling = 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "是否可以扩容过滤器"
    }];
    int64 MaxTTLSeconds = 5[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "保存key的最大过期秒数"
    }];
}

message CuckooFilterSetting{
    int64 Capacity = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "最大容量"
    }]; 
    int64 Expansion = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "扩容倍数"
    }]; 
    bool NonScaling = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "是否可以扩容过滤器"
    }]; 
    int64 BucketSize = 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "只对CUCKOO有效,桶大小,每个存储桶中的项目数.较高的桶大小值会提高填充率,但也会导致更高的错误率和稍慢的性能"
    }]; 
    int64 MaxIterations = 5[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "只对CUCKOO有效,在声明过滤器已满并创建附加过滤器之前尝试在存储桶之间交换项目的次数.较低的值对性能更好,较高的值对过滤器填充率更好"
    }];
    int64 MaxTTLSeconds = 6[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "保存key的最大过期秒数"
    }];
}


message RedisFilterSetting{
    oneof setting{
        SetFilterSetting setfilter_setting = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "setfilter的设置项"
        }];
        BloomFilterSetting BloomfilterSetting= 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "bloomfilter的设置项"
        }];
        CuckooFilterSetting CuckoofilterSetting = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "cuckoofilter的设置项"
        }];
    }
}
// message RedisFilterInfo{
//     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
//         json_schema: {
//             title: "RedisFilterInfo"
//             description: "过滤器配置信息"
//             required: ["FilterType","Capacity","ErrorRate"]
//         }
//     };
//     RedisFilterType FilterType = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
//         description: "过滤器类型"
//     }];
//     oneof Setting{
//         SetFilterSetting setfilter_setting = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
//             description: "setfilter的设置项"
//         }];
//         BloomFilterSetting BloomfilterSetting= 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
//             description: "bloomfilter的设置项"
//         }];
//         CuckooFilterSetting CuckoofilterSetting = 5[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
//             description: "cuckoofilter的设置项"
//         }];
//     }
// }
