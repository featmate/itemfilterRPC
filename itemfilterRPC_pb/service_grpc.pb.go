// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pbschema/itemfilterRPC/service.proto

package itemfilterRPC_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ITEMFILTERRPCClient is the client API for ITEMFILTERRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ITEMFILTERRPCClient interface {
	//meta
	//GetMeta 获取服务的配置信息
	GetMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetaResponse, error)
	//blacklist
	// GetBlacklistList 获取黑名单列表
	GetBlacklistList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	//NewBlacklist 创建一个新的blacklist
	NewBlacklist(ctx context.Context, in *NewFilterQuery, opts ...grpc.CallOption) (*IDResponse, error)
	//GetBlacklistInfo 获取黑名单信息
	GetBlacklistInfo(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*BlacklistInfoResponse, error)
	//DeleteBlacklist 删除blackList
	DeleteBlacklist(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*IDResponse, error)
	//UpdateBlacklistSource 更新BlackList内不可用资源范围
	UpdateBlacklistSource(ctx context.Context, in *UpdateBlacklistSourceQuery, opts ...grpc.CallOption) (*IDResponse, error)
	//CheckSourceInBlacklist 检查物品在不在黑名单中
	CheckSourceInBlacklist(ctx context.Context, in *CheckSourceQuery, opts ...grpc.CallOption) (*CandidateStatusResponse, error)
	//FilterSourceInBlacklist 过滤掉在黑名单中的物品,保留不在的部分
	FilterSourceInBlacklist(ctx context.Context, in *FilterSourceQuery, opts ...grpc.CallOption) (*SurvivorResponse, error)
	//range
	//GetRangeList 获取范围列表
	GetRangeList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	//NewRange 创建一个新的range,注意创建并不会向其中添加元素,添加元素请调用AddRangeSource接口
	NewRange(ctx context.Context, in *NewFilterQuery, opts ...grpc.CallOption) (*IDResponse, error)
	//GetRangeInfo 获取范围信息
	GetRangeInfo(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*RangeInfoResponse, error)
	//DeleteRange 删除范围
	DeleteRange(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*IDResponse, error)
	// AddRangeSource 添加范围内元素
	AddRangeSource(ctx context.Context, in *AddRangeSourceQuery, opts ...grpc.CallOption) (*IDResponse, error)
	// BatchAddRangeSource 添加范围内元素
	BatchAddRangeSource(ctx context.Context, opts ...grpc.CallOption) (ITEMFILTERRPC_BatchAddRangeSourceClient, error)
	//CheckSourceInRange 检查物品在不在range中
	CheckSourceInRange(ctx context.Context, in *CheckSourceQuery, opts ...grpc.CallOption) (*CandidateStatusResponse, error)
	//FilterSourceNotInRange 过滤掉不在范围内的物品,保留在的部分
	FilterSourceNotInRange(ctx context.Context, in *FilterSourceQuery, opts ...grpc.CallOption) (*SurvivorResponse, error)
	//Context
	//GetContextStatus  获取上下文过滤器状态信息
	GetContextStatus(ctx context.Context, in *IDEntitySourceTypeQuery, opts ...grpc.CallOption) (*GetContextStatusResponse, error)
	//NewContexts 批量创建场景
	NewContexts(ctx context.Context, in *NewFilterQuery, opts ...grpc.CallOption) (*IDResponse, error)
	//Picker
	//GetPickerStatus  获取上下文过滤器状态信息
	GetPickerStatus(ctx context.Context, in *IDEntitySourceTypeQuery, opts ...grpc.CallOption) (*GetPickerStatusResponse, error)
	//NewPickers 批量创建Picker
	NewPickers(ctx context.Context, in *NewPickerFilterQuery, opts ...grpc.CallOption) (*IDResponse, error)
	//操作
	//SetEntitySourceUsed  设置资源在指定条件中已被使用
	SetEntitySourceUsed(ctx context.Context, in *SetSourceUsedQuery, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//BatchSetEntitySourceUsed  设置资源在指定条件中已被使用
	BatchSetEntitySourceUsed(ctx context.Context, opts ...grpc.CallOption) (ITEMFILTERRPC_BatchSetEntitySourceUsedClient, error)
	//CheckEntitySource 检查实体资源是否可用
	CheckEntitySource(ctx context.Context, in *CheckQuery, opts ...grpc.CallOption) (*CandidateStatusResponse, error)
	//FilterEntitySource 过滤掉不符合的,保留可用的
	FilterEntitySource(ctx context.Context, in *FilterQuery, opts ...grpc.CallOption) (*SurvivorResponse, error)
	//PickerCounter
	// GetPickerCounterNumber 获取指定条件下PickerCounter的计数值
	// 需要启动相关功能
	GetPickerCounterNumber(ctx context.Context, in *GetPickerCounterNumberQuery, opts ...grpc.CallOption) (*GetPickerCounterNumberResponse, error)
}

type iTEMFILTERRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewITEMFILTERRPCClient(cc grpc.ClientConnInterface) ITEMFILTERRPCClient {
	return &iTEMFILTERRPCClient{cc}
}

func (c *iTEMFILTERRPCClient) GetMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) GetBlacklistList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/GetBlacklistList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) NewBlacklist(ctx context.Context, in *NewFilterQuery, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/NewBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) GetBlacklistInfo(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*BlacklistInfoResponse, error) {
	out := new(BlacklistInfoResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/GetBlacklistInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) DeleteBlacklist(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/DeleteBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) UpdateBlacklistSource(ctx context.Context, in *UpdateBlacklistSourceQuery, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/UpdateBlacklistSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) CheckSourceInBlacklist(ctx context.Context, in *CheckSourceQuery, opts ...grpc.CallOption) (*CandidateStatusResponse, error) {
	out := new(CandidateStatusResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/CheckSourceInBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) FilterSourceInBlacklist(ctx context.Context, in *FilterSourceQuery, opts ...grpc.CallOption) (*SurvivorResponse, error) {
	out := new(SurvivorResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/FilterSourceInBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) GetRangeList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/GetRangeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) NewRange(ctx context.Context, in *NewFilterQuery, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/NewRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) GetRangeInfo(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*RangeInfoResponse, error) {
	out := new(RangeInfoResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/GetRangeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) DeleteRange(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/DeleteRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) AddRangeSource(ctx context.Context, in *AddRangeSourceQuery, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/AddRangeSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) BatchAddRangeSource(ctx context.Context, opts ...grpc.CallOption) (ITEMFILTERRPC_BatchAddRangeSourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ITEMFILTERRPC_ServiceDesc.Streams[0], "/itemfilterRPC.ITEMFILTERRPC/BatchAddRangeSource", opts...)
	if err != nil {
		return nil, err
	}
	x := &iTEMFILTERRPCBatchAddRangeSourceClient{stream}
	return x, nil
}

type ITEMFILTERRPC_BatchAddRangeSourceClient interface {
	Send(*AddRangeSourceQuery) error
	CloseAndRecv() (*ListResponse, error)
	grpc.ClientStream
}

type iTEMFILTERRPCBatchAddRangeSourceClient struct {
	grpc.ClientStream
}

func (x *iTEMFILTERRPCBatchAddRangeSourceClient) Send(m *AddRangeSourceQuery) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iTEMFILTERRPCBatchAddRangeSourceClient) CloseAndRecv() (*ListResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iTEMFILTERRPCClient) CheckSourceInRange(ctx context.Context, in *CheckSourceQuery, opts ...grpc.CallOption) (*CandidateStatusResponse, error) {
	out := new(CandidateStatusResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/CheckSourceInRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) FilterSourceNotInRange(ctx context.Context, in *FilterSourceQuery, opts ...grpc.CallOption) (*SurvivorResponse, error) {
	out := new(SurvivorResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/FilterSourceNotInRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) GetContextStatus(ctx context.Context, in *IDEntitySourceTypeQuery, opts ...grpc.CallOption) (*GetContextStatusResponse, error) {
	out := new(GetContextStatusResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/GetContextStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) NewContexts(ctx context.Context, in *NewFilterQuery, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/NewContexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) GetPickerStatus(ctx context.Context, in *IDEntitySourceTypeQuery, opts ...grpc.CallOption) (*GetPickerStatusResponse, error) {
	out := new(GetPickerStatusResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/GetPickerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) NewPickers(ctx context.Context, in *NewPickerFilterQuery, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/NewPickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) SetEntitySourceUsed(ctx context.Context, in *SetSourceUsedQuery, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/SetEntitySourceUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) BatchSetEntitySourceUsed(ctx context.Context, opts ...grpc.CallOption) (ITEMFILTERRPC_BatchSetEntitySourceUsedClient, error) {
	stream, err := c.cc.NewStream(ctx, &ITEMFILTERRPC_ServiceDesc.Streams[1], "/itemfilterRPC.ITEMFILTERRPC/BatchSetEntitySourceUsed", opts...)
	if err != nil {
		return nil, err
	}
	x := &iTEMFILTERRPCBatchSetEntitySourceUsedClient{stream}
	return x, nil
}

type ITEMFILTERRPC_BatchSetEntitySourceUsedClient interface {
	Send(*SetSourceUsedQuery) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type iTEMFILTERRPCBatchSetEntitySourceUsedClient struct {
	grpc.ClientStream
}

func (x *iTEMFILTERRPCBatchSetEntitySourceUsedClient) Send(m *SetSourceUsedQuery) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iTEMFILTERRPCBatchSetEntitySourceUsedClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iTEMFILTERRPCClient) CheckEntitySource(ctx context.Context, in *CheckQuery, opts ...grpc.CallOption) (*CandidateStatusResponse, error) {
	out := new(CandidateStatusResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/CheckEntitySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) FilterEntitySource(ctx context.Context, in *FilterQuery, opts ...grpc.CallOption) (*SurvivorResponse, error) {
	out := new(SurvivorResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/FilterEntitySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTEMFILTERRPCClient) GetPickerCounterNumber(ctx context.Context, in *GetPickerCounterNumberQuery, opts ...grpc.CallOption) (*GetPickerCounterNumberResponse, error) {
	out := new(GetPickerCounterNumberResponse)
	err := c.cc.Invoke(ctx, "/itemfilterRPC.ITEMFILTERRPC/GetPickerCounterNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ITEMFILTERRPCServer is the server API for ITEMFILTERRPC service.
// All implementations must embed UnimplementedITEMFILTERRPCServer
// for forward compatibility
type ITEMFILTERRPCServer interface {
	//meta
	//GetMeta 获取服务的配置信息
	GetMeta(context.Context, *emptypb.Empty) (*MetaResponse, error)
	//blacklist
	// GetBlacklistList 获取黑名单列表
	GetBlacklistList(context.Context, *emptypb.Empty) (*ListResponse, error)
	//NewBlacklist 创建一个新的blacklist
	NewBlacklist(context.Context, *NewFilterQuery) (*IDResponse, error)
	//GetBlacklistInfo 获取黑名单信息
	GetBlacklistInfo(context.Context, *IDQuery) (*BlacklistInfoResponse, error)
	//DeleteBlacklist 删除blackList
	DeleteBlacklist(context.Context, *IDQuery) (*IDResponse, error)
	//UpdateBlacklistSource 更新BlackList内不可用资源范围
	UpdateBlacklistSource(context.Context, *UpdateBlacklistSourceQuery) (*IDResponse, error)
	//CheckSourceInBlacklist 检查物品在不在黑名单中
	CheckSourceInBlacklist(context.Context, *CheckSourceQuery) (*CandidateStatusResponse, error)
	//FilterSourceInBlacklist 过滤掉在黑名单中的物品,保留不在的部分
	FilterSourceInBlacklist(context.Context, *FilterSourceQuery) (*SurvivorResponse, error)
	//range
	//GetRangeList 获取范围列表
	GetRangeList(context.Context, *emptypb.Empty) (*ListResponse, error)
	//NewRange 创建一个新的range,注意创建并不会向其中添加元素,添加元素请调用AddRangeSource接口
	NewRange(context.Context, *NewFilterQuery) (*IDResponse, error)
	//GetRangeInfo 获取范围信息
	GetRangeInfo(context.Context, *IDQuery) (*RangeInfoResponse, error)
	//DeleteRange 删除范围
	DeleteRange(context.Context, *IDQuery) (*IDResponse, error)
	// AddRangeSource 添加范围内元素
	AddRangeSource(context.Context, *AddRangeSourceQuery) (*IDResponse, error)
	// BatchAddRangeSource 添加范围内元素
	BatchAddRangeSource(ITEMFILTERRPC_BatchAddRangeSourceServer) error
	//CheckSourceInRange 检查物品在不在range中
	CheckSourceInRange(context.Context, *CheckSourceQuery) (*CandidateStatusResponse, error)
	//FilterSourceNotInRange 过滤掉不在范围内的物品,保留在的部分
	FilterSourceNotInRange(context.Context, *FilterSourceQuery) (*SurvivorResponse, error)
	//Context
	//GetContextStatus  获取上下文过滤器状态信息
	GetContextStatus(context.Context, *IDEntitySourceTypeQuery) (*GetContextStatusResponse, error)
	//NewContexts 批量创建场景
	NewContexts(context.Context, *NewFilterQuery) (*IDResponse, error)
	//Picker
	//GetPickerStatus  获取上下文过滤器状态信息
	GetPickerStatus(context.Context, *IDEntitySourceTypeQuery) (*GetPickerStatusResponse, error)
	//NewPickers 批量创建Picker
	NewPickers(context.Context, *NewPickerFilterQuery) (*IDResponse, error)
	//操作
	//SetEntitySourceUsed  设置资源在指定条件中已被使用
	SetEntitySourceUsed(context.Context, *SetSourceUsedQuery) (*emptypb.Empty, error)
	//BatchSetEntitySourceUsed  设置资源在指定条件中已被使用
	BatchSetEntitySourceUsed(ITEMFILTERRPC_BatchSetEntitySourceUsedServer) error
	//CheckEntitySource 检查实体资源是否可用
	CheckEntitySource(context.Context, *CheckQuery) (*CandidateStatusResponse, error)
	//FilterEntitySource 过滤掉不符合的,保留可用的
	FilterEntitySource(context.Context, *FilterQuery) (*SurvivorResponse, error)
	//PickerCounter
	// GetPickerCounterNumber 获取指定条件下PickerCounter的计数值
	// 需要启动相关功能
	GetPickerCounterNumber(context.Context, *GetPickerCounterNumberQuery) (*GetPickerCounterNumberResponse, error)
	mustEmbedUnimplementedITEMFILTERRPCServer()
}

// UnimplementedITEMFILTERRPCServer must be embedded to have forward compatible implementations.
type UnimplementedITEMFILTERRPCServer struct {
}

func (UnimplementedITEMFILTERRPCServer) GetMeta(context.Context, *emptypb.Empty) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedITEMFILTERRPCServer) GetBlacklistList(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistList not implemented")
}
func (UnimplementedITEMFILTERRPCServer) NewBlacklist(context.Context, *NewFilterQuery) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBlacklist not implemented")
}
func (UnimplementedITEMFILTERRPCServer) GetBlacklistInfo(context.Context, *IDQuery) (*BlacklistInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistInfo not implemented")
}
func (UnimplementedITEMFILTERRPCServer) DeleteBlacklist(context.Context, *IDQuery) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlacklist not implemented")
}
func (UnimplementedITEMFILTERRPCServer) UpdateBlacklistSource(context.Context, *UpdateBlacklistSourceQuery) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlacklistSource not implemented")
}
func (UnimplementedITEMFILTERRPCServer) CheckSourceInBlacklist(context.Context, *CheckSourceQuery) (*CandidateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSourceInBlacklist not implemented")
}
func (UnimplementedITEMFILTERRPCServer) FilterSourceInBlacklist(context.Context, *FilterSourceQuery) (*SurvivorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSourceInBlacklist not implemented")
}
func (UnimplementedITEMFILTERRPCServer) GetRangeList(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRangeList not implemented")
}
func (UnimplementedITEMFILTERRPCServer) NewRange(context.Context, *NewFilterQuery) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRange not implemented")
}
func (UnimplementedITEMFILTERRPCServer) GetRangeInfo(context.Context, *IDQuery) (*RangeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRangeInfo not implemented")
}
func (UnimplementedITEMFILTERRPCServer) DeleteRange(context.Context, *IDQuery) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRange not implemented")
}
func (UnimplementedITEMFILTERRPCServer) AddRangeSource(context.Context, *AddRangeSourceQuery) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRangeSource not implemented")
}
func (UnimplementedITEMFILTERRPCServer) BatchAddRangeSource(ITEMFILTERRPC_BatchAddRangeSourceServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchAddRangeSource not implemented")
}
func (UnimplementedITEMFILTERRPCServer) CheckSourceInRange(context.Context, *CheckSourceQuery) (*CandidateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSourceInRange not implemented")
}
func (UnimplementedITEMFILTERRPCServer) FilterSourceNotInRange(context.Context, *FilterSourceQuery) (*SurvivorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSourceNotInRange not implemented")
}
func (UnimplementedITEMFILTERRPCServer) GetContextStatus(context.Context, *IDEntitySourceTypeQuery) (*GetContextStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContextStatus not implemented")
}
func (UnimplementedITEMFILTERRPCServer) NewContexts(context.Context, *NewFilterQuery) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewContexts not implemented")
}
func (UnimplementedITEMFILTERRPCServer) GetPickerStatus(context.Context, *IDEntitySourceTypeQuery) (*GetPickerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPickerStatus not implemented")
}
func (UnimplementedITEMFILTERRPCServer) NewPickers(context.Context, *NewPickerFilterQuery) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPickers not implemented")
}
func (UnimplementedITEMFILTERRPCServer) SetEntitySourceUsed(context.Context, *SetSourceUsedQuery) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEntitySourceUsed not implemented")
}
func (UnimplementedITEMFILTERRPCServer) BatchSetEntitySourceUsed(ITEMFILTERRPC_BatchSetEntitySourceUsedServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchSetEntitySourceUsed not implemented")
}
func (UnimplementedITEMFILTERRPCServer) CheckEntitySource(context.Context, *CheckQuery) (*CandidateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEntitySource not implemented")
}
func (UnimplementedITEMFILTERRPCServer) FilterEntitySource(context.Context, *FilterQuery) (*SurvivorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterEntitySource not implemented")
}
func (UnimplementedITEMFILTERRPCServer) GetPickerCounterNumber(context.Context, *GetPickerCounterNumberQuery) (*GetPickerCounterNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPickerCounterNumber not implemented")
}
func (UnimplementedITEMFILTERRPCServer) mustEmbedUnimplementedITEMFILTERRPCServer() {}

// UnsafeITEMFILTERRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ITEMFILTERRPCServer will
// result in compilation errors.
type UnsafeITEMFILTERRPCServer interface {
	mustEmbedUnimplementedITEMFILTERRPCServer()
}

func RegisterITEMFILTERRPCServer(s grpc.ServiceRegistrar, srv ITEMFILTERRPCServer) {
	s.RegisterService(&ITEMFILTERRPC_ServiceDesc, srv)
}

func _ITEMFILTERRPC_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).GetMeta(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_GetBlacklistList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).GetBlacklistList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/GetBlacklistList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).GetBlacklistList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_NewBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFilterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).NewBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/NewBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).NewBlacklist(ctx, req.(*NewFilterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_GetBlacklistInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).GetBlacklistInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/GetBlacklistInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).GetBlacklistInfo(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_DeleteBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).DeleteBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/DeleteBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).DeleteBlacklist(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_UpdateBlacklistSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlacklistSourceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).UpdateBlacklistSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/UpdateBlacklistSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).UpdateBlacklistSource(ctx, req.(*UpdateBlacklistSourceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_CheckSourceInBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSourceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).CheckSourceInBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/CheckSourceInBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).CheckSourceInBlacklist(ctx, req.(*CheckSourceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_FilterSourceInBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSourceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).FilterSourceInBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/FilterSourceInBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).FilterSourceInBlacklist(ctx, req.(*FilterSourceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_GetRangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).GetRangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/GetRangeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).GetRangeList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_NewRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFilterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).NewRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/NewRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).NewRange(ctx, req.(*NewFilterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_GetRangeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).GetRangeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/GetRangeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).GetRangeInfo(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_DeleteRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).DeleteRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/DeleteRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).DeleteRange(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_AddRangeSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRangeSourceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).AddRangeSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/AddRangeSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).AddRangeSource(ctx, req.(*AddRangeSourceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_BatchAddRangeSource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ITEMFILTERRPCServer).BatchAddRangeSource(&iTEMFILTERRPCBatchAddRangeSourceServer{stream})
}

type ITEMFILTERRPC_BatchAddRangeSourceServer interface {
	SendAndClose(*ListResponse) error
	Recv() (*AddRangeSourceQuery, error)
	grpc.ServerStream
}

type iTEMFILTERRPCBatchAddRangeSourceServer struct {
	grpc.ServerStream
}

func (x *iTEMFILTERRPCBatchAddRangeSourceServer) SendAndClose(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iTEMFILTERRPCBatchAddRangeSourceServer) Recv() (*AddRangeSourceQuery, error) {
	m := new(AddRangeSourceQuery)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ITEMFILTERRPC_CheckSourceInRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSourceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).CheckSourceInRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/CheckSourceInRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).CheckSourceInRange(ctx, req.(*CheckSourceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_FilterSourceNotInRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSourceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).FilterSourceNotInRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/FilterSourceNotInRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).FilterSourceNotInRange(ctx, req.(*FilterSourceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_GetContextStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDEntitySourceTypeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).GetContextStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/GetContextStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).GetContextStatus(ctx, req.(*IDEntitySourceTypeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_NewContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFilterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).NewContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/NewContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).NewContexts(ctx, req.(*NewFilterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_GetPickerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDEntitySourceTypeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).GetPickerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/GetPickerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).GetPickerStatus(ctx, req.(*IDEntitySourceTypeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_NewPickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPickerFilterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).NewPickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/NewPickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).NewPickers(ctx, req.(*NewPickerFilterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_SetEntitySourceUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSourceUsedQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).SetEntitySourceUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/SetEntitySourceUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).SetEntitySourceUsed(ctx, req.(*SetSourceUsedQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_BatchSetEntitySourceUsed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ITEMFILTERRPCServer).BatchSetEntitySourceUsed(&iTEMFILTERRPCBatchSetEntitySourceUsedServer{stream})
}

type ITEMFILTERRPC_BatchSetEntitySourceUsedServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SetSourceUsedQuery, error)
	grpc.ServerStream
}

type iTEMFILTERRPCBatchSetEntitySourceUsedServer struct {
	grpc.ServerStream
}

func (x *iTEMFILTERRPCBatchSetEntitySourceUsedServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iTEMFILTERRPCBatchSetEntitySourceUsedServer) Recv() (*SetSourceUsedQuery, error) {
	m := new(SetSourceUsedQuery)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ITEMFILTERRPC_CheckEntitySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).CheckEntitySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/CheckEntitySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).CheckEntitySource(ctx, req.(*CheckQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_FilterEntitySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).FilterEntitySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/FilterEntitySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).FilterEntitySource(ctx, req.(*FilterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITEMFILTERRPC_GetPickerCounterNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPickerCounterNumberQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITEMFILTERRPCServer).GetPickerCounterNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemfilterRPC.ITEMFILTERRPC/GetPickerCounterNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITEMFILTERRPCServer).GetPickerCounterNumber(ctx, req.(*GetPickerCounterNumberQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ITEMFILTERRPC_ServiceDesc is the grpc.ServiceDesc for ITEMFILTERRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ITEMFILTERRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "itemfilterRPC.ITEMFILTERRPC",
	HandlerType: (*ITEMFILTERRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeta",
			Handler:    _ITEMFILTERRPC_GetMeta_Handler,
		},
		{
			MethodName: "GetBlacklistList",
			Handler:    _ITEMFILTERRPC_GetBlacklistList_Handler,
		},
		{
			MethodName: "NewBlacklist",
			Handler:    _ITEMFILTERRPC_NewBlacklist_Handler,
		},
		{
			MethodName: "GetBlacklistInfo",
			Handler:    _ITEMFILTERRPC_GetBlacklistInfo_Handler,
		},
		{
			MethodName: "DeleteBlacklist",
			Handler:    _ITEMFILTERRPC_DeleteBlacklist_Handler,
		},
		{
			MethodName: "UpdateBlacklistSource",
			Handler:    _ITEMFILTERRPC_UpdateBlacklistSource_Handler,
		},
		{
			MethodName: "CheckSourceInBlacklist",
			Handler:    _ITEMFILTERRPC_CheckSourceInBlacklist_Handler,
		},
		{
			MethodName: "FilterSourceInBlacklist",
			Handler:    _ITEMFILTERRPC_FilterSourceInBlacklist_Handler,
		},
		{
			MethodName: "GetRangeList",
			Handler:    _ITEMFILTERRPC_GetRangeList_Handler,
		},
		{
			MethodName: "NewRange",
			Handler:    _ITEMFILTERRPC_NewRange_Handler,
		},
		{
			MethodName: "GetRangeInfo",
			Handler:    _ITEMFILTERRPC_GetRangeInfo_Handler,
		},
		{
			MethodName: "DeleteRange",
			Handler:    _ITEMFILTERRPC_DeleteRange_Handler,
		},
		{
			MethodName: "AddRangeSource",
			Handler:    _ITEMFILTERRPC_AddRangeSource_Handler,
		},
		{
			MethodName: "CheckSourceInRange",
			Handler:    _ITEMFILTERRPC_CheckSourceInRange_Handler,
		},
		{
			MethodName: "FilterSourceNotInRange",
			Handler:    _ITEMFILTERRPC_FilterSourceNotInRange_Handler,
		},
		{
			MethodName: "GetContextStatus",
			Handler:    _ITEMFILTERRPC_GetContextStatus_Handler,
		},
		{
			MethodName: "NewContexts",
			Handler:    _ITEMFILTERRPC_NewContexts_Handler,
		},
		{
			MethodName: "GetPickerStatus",
			Handler:    _ITEMFILTERRPC_GetPickerStatus_Handler,
		},
		{
			MethodName: "NewPickers",
			Handler:    _ITEMFILTERRPC_NewPickers_Handler,
		},
		{
			MethodName: "SetEntitySourceUsed",
			Handler:    _ITEMFILTERRPC_SetEntitySourceUsed_Handler,
		},
		{
			MethodName: "CheckEntitySource",
			Handler:    _ITEMFILTERRPC_CheckEntitySource_Handler,
		},
		{
			MethodName: "FilterEntitySource",
			Handler:    _ITEMFILTERRPC_FilterEntitySource_Handler,
		},
		{
			MethodName: "GetPickerCounterNumber",
			Handler:    _ITEMFILTERRPC_GetPickerCounterNumber_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchAddRangeSource",
			Handler:       _ITEMFILTERRPC_BatchAddRangeSource_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchSetEntitySourceUsed",
			Handler:       _ITEMFILTERRPC_BatchSetEntitySourceUsed_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pbschema/itemfilterRPC/service.proto",
}
