// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: pbschema/itemfilterRPC/metadatamodel.proto

package itemfilterRPC_pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Meta
type MetaDataStoreType int32

const (
	MetaDataStoreType_SELF  MetaDataStoreType = 0
	MetaDataStoreType_REDIS MetaDataStoreType = 1
	MetaDataStoreType_ETCD  MetaDataStoreType = 2
)

// Enum value maps for MetaDataStoreType.
var (
	MetaDataStoreType_name = map[int32]string{
		0: "SELF",
		1: "REDIS",
		2: "ETCD",
	}
	MetaDataStoreType_value = map[string]int32{
		"SELF":  0,
		"REDIS": 1,
		"ETCD":  2,
	}
)

func (x MetaDataStoreType) Enum() *MetaDataStoreType {
	p := new(MetaDataStoreType)
	*p = x
	return p
}

func (x MetaDataStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaDataStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_enumTypes[0].Descriptor()
}

func (MetaDataStoreType) Type() protoreflect.EnumType {
	return &file_pbschema_itemfilterRPC_metadatamodel_proto_enumTypes[0]
}

func (x MetaDataStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetaDataStoreType.Descriptor instead.
func (MetaDataStoreType) EnumDescriptor() ([]byte, []int) {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP(), []int{0}
}

type MetaMetaDataStoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreType MetaDataStoreType `protobuf:"varint,1,opt,name=StoreType,proto3,enum=itemfilterRPC.MetaDataStoreType" json:"StoreType,omitempty"`
	StoreURL  string            `protobuf:"bytes,2,opt,name=StoreURL,proto3" json:"StoreURL,omitempty"`
}

func (x *MetaMetaDataStoreConfig) Reset() {
	*x = MetaMetaDataStoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaMetaDataStoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaMetaDataStoreConfig) ProtoMessage() {}

func (x *MetaMetaDataStoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaMetaDataStoreConfig.ProtoReflect.Descriptor instead.
func (*MetaMetaDataStoreConfig) Descriptor() ([]byte, []int) {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP(), []int{0}
}

func (x *MetaMetaDataStoreConfig) GetStoreType() MetaDataStoreType {
	if x != nil {
		return x.StoreType
	}
	return MetaDataStoreType_SELF
}

func (x *MetaMetaDataStoreConfig) GetStoreURL() string {
	if x != nil {
		return x.StoreURL
	}
	return ""
}

type MetaBlacklistConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeInfoKey       string `protobuf:"bytes,1,opt,name=RangeInfoKey,proto3" json:"RangeInfoKey,omitempty"`
	InfoKeyNamespace   string `protobuf:"bytes,2,opt,name=InfoKeyNamespace,proto3" json:"InfoKeyNamespace,omitempty"`
	InfoDefaultTTLDays int32  `protobuf:"varint,3,opt,name=InfoDefaultTTLDays,proto3" json:"InfoDefaultTTLDays,omitempty"`
	IDGener            string `protobuf:"bytes,4,opt,name=IDGener,proto3" json:"IDGener,omitempty"`
}

func (x *MetaBlacklistConfig) Reset() {
	*x = MetaBlacklistConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaBlacklistConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaBlacklistConfig) ProtoMessage() {}

func (x *MetaBlacklistConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaBlacklistConfig.ProtoReflect.Descriptor instead.
func (*MetaBlacklistConfig) Descriptor() ([]byte, []int) {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP(), []int{1}
}

func (x *MetaBlacklistConfig) GetRangeInfoKey() string {
	if x != nil {
		return x.RangeInfoKey
	}
	return ""
}

func (x *MetaBlacklistConfig) GetInfoKeyNamespace() string {
	if x != nil {
		return x.InfoKeyNamespace
	}
	return ""
}

func (x *MetaBlacklistConfig) GetInfoDefaultTTLDays() int32 {
	if x != nil {
		return x.InfoDefaultTTLDays
	}
	return 0
}

func (x *MetaBlacklistConfig) GetIDGener() string {
	if x != nil {
		return x.IDGener
	}
	return ""
}

type MetaRangeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeInfoKey       string `protobuf:"bytes,1,opt,name=RangeInfoKey,proto3" json:"RangeInfoKey,omitempty"`
	InfoKeyNamespace   string `protobuf:"bytes,2,opt,name=InfoKeyNamespace,proto3" json:"InfoKeyNamespace,omitempty"`
	InfoDefaultTTLDays int32  `protobuf:"varint,3,opt,name=InfoDefaultTTLDays,proto3" json:"InfoDefaultTTLDays,omitempty"`
	IDGener            string `protobuf:"bytes,4,opt,name=IDGener,proto3" json:"IDGener,omitempty"`
}

func (x *MetaRangeConfig) Reset() {
	*x = MetaRangeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaRangeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaRangeConfig) ProtoMessage() {}

func (x *MetaRangeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaRangeConfig.ProtoReflect.Descriptor instead.
func (*MetaRangeConfig) Descriptor() ([]byte, []int) {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP(), []int{2}
}

func (x *MetaRangeConfig) GetRangeInfoKey() string {
	if x != nil {
		return x.RangeInfoKey
	}
	return ""
}

func (x *MetaRangeConfig) GetInfoKeyNamespace() string {
	if x != nil {
		return x.InfoKeyNamespace
	}
	return ""
}

func (x *MetaRangeConfig) GetInfoDefaultTTLDays() int32 {
	if x != nil {
		return x.InfoDefaultTTLDays
	}
	return 0
}

func (x *MetaRangeConfig) GetIDGener() string {
	if x != nil {
		return x.IDGener
	}
	return ""
}

type MetaContextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTemplate    string              `protobuf:"bytes,1,opt,name=KeyTemplate,proto3" json:"KeyTemplate,omitempty"`
	DefaultSetting *RedisFilterSetting `protobuf:"bytes,2,opt,name=DefaultSetting,proto3" json:"DefaultSetting,omitempty"`
}

func (x *MetaContextConfig) Reset() {
	*x = MetaContextConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaContextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaContextConfig) ProtoMessage() {}

func (x *MetaContextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaContextConfig.ProtoReflect.Descriptor instead.
func (*MetaContextConfig) Descriptor() ([]byte, []int) {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP(), []int{3}
}

func (x *MetaContextConfig) GetKeyTemplate() string {
	if x != nil {
		return x.KeyTemplate
	}
	return ""
}

func (x *MetaContextConfig) GetDefaultSetting() *RedisFilterSetting {
	if x != nil {
		return x.DefaultSetting
	}
	return nil
}

type MetaPickerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTemplate string                         `protobuf:"bytes,2,opt,name=KeyTemplate,proto3" json:"KeyTemplate,omitempty"`
	FilterInfos map[string]*RedisFilterSetting `protobuf:"bytes,3,rep,name=FilterInfos,proto3" json:"FilterInfos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetaPickerConfig) Reset() {
	*x = MetaPickerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaPickerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaPickerConfig) ProtoMessage() {}

func (x *MetaPickerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaPickerConfig.ProtoReflect.Descriptor instead.
func (*MetaPickerConfig) Descriptor() ([]byte, []int) {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP(), []int{4}
}

func (x *MetaPickerConfig) GetKeyTemplate() string {
	if x != nil {
		return x.KeyTemplate
	}
	return ""
}

func (x *MetaPickerConfig) GetFilterInfos() map[string]*RedisFilterSetting {
	if x != nil {
		return x.FilterInfos
	}
	return nil
}

type MetaPickerCounterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TTLDays                       int32  `protobuf:"varint,1,opt,name=TTLDays,proto3" json:"TTLDays,omitempty"`
	PickerCounterKeyTemplate      string `protobuf:"bytes,2,opt,name=PickerCounterKeyTemplate,proto3" json:"PickerCounterKeyTemplate,omitempty"`
	RangeCounterOn                bool   `protobuf:"varint,3,opt,name=RangeCounterOn,proto3" json:"RangeCounterOn,omitempty"`
	RangeTTLDays                  int32  `protobuf:"varint,4,opt,name=RangeTTLDays,proto3" json:"RangeTTLDays,omitempty"`
	RangePickerCounterKeyTemplate string `protobuf:"bytes,5,opt,name=RangePickerCounterKeyTemplate,proto3" json:"RangePickerCounterKeyTemplate,omitempty"`
}

func (x *MetaPickerCounterConfig) Reset() {
	*x = MetaPickerCounterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaPickerCounterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaPickerCounterConfig) ProtoMessage() {}

func (x *MetaPickerCounterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaPickerCounterConfig.ProtoReflect.Descriptor instead.
func (*MetaPickerCounterConfig) Descriptor() ([]byte, []int) {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP(), []int{5}
}

func (x *MetaPickerCounterConfig) GetTTLDays() int32 {
	if x != nil {
		return x.TTLDays
	}
	return 0
}

func (x *MetaPickerCounterConfig) GetPickerCounterKeyTemplate() string {
	if x != nil {
		return x.PickerCounterKeyTemplate
	}
	return ""
}

func (x *MetaPickerCounterConfig) GetRangeCounterOn() bool {
	if x != nil {
		return x.RangeCounterOn
	}
	return false
}

func (x *MetaPickerCounterConfig) GetRangeTTLDays() int32 {
	if x != nil {
		return x.RangeTTLDays
	}
	return 0
}

func (x *MetaPickerCounterConfig) GetRangePickerCounterKeyTemplate() string {
	if x != nil {
		return x.RangePickerCounterKeyTemplate
	}
	return ""
}

type MetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedisURL            string                   `protobuf:"bytes,1,opt,name=RedisURL,proto3" json:"RedisURL,omitempty"`
	MetaDataStoreConfig *MetaMetaDataStoreConfig `protobuf:"bytes,2,opt,name=MetaDataStoreConfig,proto3" json:"MetaDataStoreConfig,omitempty"`
	BlacklistConfig     *MetaBlacklistConfig     `protobuf:"bytes,3,opt,name=BlacklistConfig,proto3" json:"BlacklistConfig,omitempty"`
	RangeConfig         *MetaRangeConfig         `protobuf:"bytes,4,opt,name=RangeConfig,proto3" json:"RangeConfig,omitempty"`
	ContextConfig       *MetaContextConfig       `protobuf:"bytes,5,opt,name=ContextConfig,proto3" json:"ContextConfig,omitempty"`
	PickerConfig        *MetaPickerConfig        `protobuf:"bytes,6,opt,name=PickerConfig,proto3" json:"PickerConfig,omitempty"`
	PickerCounterOn     bool                     `protobuf:"varint,7,opt,name=PickerCounterOn,proto3" json:"PickerCounterOn,omitempty"`
	PickerCounterConfig *MetaPickerCounterConfig `protobuf:"bytes,8,opt,name=PickerCounterConfig,proto3" json:"PickerCounterConfig,omitempty"`
}

func (x *MetaInfo) Reset() {
	*x = MetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaInfo) ProtoMessage() {}

func (x *MetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaInfo.ProtoReflect.Descriptor instead.
func (*MetaInfo) Descriptor() ([]byte, []int) {
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP(), []int{6}
}

func (x *MetaInfo) GetRedisURL() string {
	if x != nil {
		return x.RedisURL
	}
	return ""
}

func (x *MetaInfo) GetMetaDataStoreConfig() *MetaMetaDataStoreConfig {
	if x != nil {
		return x.MetaDataStoreConfig
	}
	return nil
}

func (x *MetaInfo) GetBlacklistConfig() *MetaBlacklistConfig {
	if x != nil {
		return x.BlacklistConfig
	}
	return nil
}

func (x *MetaInfo) GetRangeConfig() *MetaRangeConfig {
	if x != nil {
		return x.RangeConfig
	}
	return nil
}

func (x *MetaInfo) GetContextConfig() *MetaContextConfig {
	if x != nil {
		return x.ContextConfig
	}
	return nil
}

func (x *MetaInfo) GetPickerConfig() *MetaPickerConfig {
	if x != nil {
		return x.PickerConfig
	}
	return nil
}

func (x *MetaInfo) GetPickerCounterOn() bool {
	if x != nil {
		return x.PickerCounterOn
	}
	return false
}

func (x *MetaInfo) GetPickerCounterConfig() *MetaPickerCounterConfig {
	if x != nil {
		return x.PickerCounterConfig
	}
	return nil
}

var File_pbschema_itemfilterRPC_metadatamodel_proto protoreflect.FileDescriptor

var file_pbschema_itemfilterRPC_metadatamodel_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x1a, 0x37, 0x70, 0x62, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2f, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x02, 0x0a,
	0x17, 0x4d, 0x65, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x50,
	0x92, 0x41, 0x4d, 0x32, 0x4b, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0xe5, 0x8f,
	0xaf, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0xba, 0x60, 0x53, 0x65, 0x6c, 0x66, 0x28, 0x30, 0x29, 0x2c,
	0x52, 0x45, 0x44, 0x49, 0x53, 0x28, 0x31, 0x29, 0xe5, 0x92, 0x8c, 0x45, 0x74, 0x63, 0x64, 0x28,
	0x32, 0x29, 0x60, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x60, 0x53, 0x65, 0x6c, 0x66, 0x60,
	0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92,
	0x41, 0x37, 0x32, 0x35, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe5, 0xb7, 0xa5, 0xe5, 0x85, 0xb7, 0xe7, 0x9a, 0x84, 0x75,
	0x72, 0x6c, 0x2c, 0x73, 0x65, 0x6c, 0x66, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x99,
	0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x55, 0x52, 0x4c, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x17, 0x4d, 0x65, 0x74, 0x61,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x32, 0x31, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x6d, 0x65, 0x74, 0x61, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe5, 0x85, 0x83, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x98, 0xe6, 0x94, 0xbe,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xd2, 0x01, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xa5, 0x04, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x5c, 0xe9, 0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d,
	0x95, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xbf, 0x9d,
	0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0x2c, 0xe8, 0xbf, 0x99, 0xe4, 0xb8, 0xaa,
	0x6b, 0x65, 0x79, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8,
	0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0x2c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xa6, 0x81, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xaf, 0xb7, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4b,
	0x65, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41,
	0x26, 0x32, 0x24, 0xe9, 0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x10, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x12, 0x49, 0x6e, 0x66,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x54, 0x4c, 0x44, 0x61, 0x79, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0xe9, 0xbb, 0x91, 0xe5,
	0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe7, 0x9a, 0x84,
	0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x2c, 0x30, 0xe4, 0xb8, 0xba, 0xe6, 0xb0, 0xb8, 0xe7, 0xbb,
	0xad, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0x52, 0x12, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x54, 0x4c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x49,
	0x44, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x32, 0x26, 0xe9, 0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe7, 0x9a, 0x84, 0x69, 0x64,
	0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe5, 0x99, 0xa8, 0x52, 0x07, 0x49, 0x44, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x3a, 0x76, 0x92, 0x41, 0x73, 0x0a, 0x71, 0x2a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x2e,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x6d, 0x65, 0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe9, 0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xe9,
	0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xd2, 0x01,
	0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0xd2, 0x01, 0x10,
	0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0xd2, 0x01, 0x07, 0x49, 0x44, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x22, 0x92, 0x04, 0x0a, 0x0f, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85,
	0x01, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x5c, 0xe8, 0x8c, 0x83, 0xe5,
	0x9b, 0xb4, 0xe7, 0x9a, 0x84, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0x2c, 0xe8, 0xbf,
	0x99, 0xe4, 0xb8, 0xaa, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0x2c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe8, 0xa6, 0x81, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xaf, 0xb7, 0xe6, 0x89, 0x8b, 0xe5,
	0x8a, 0xa8, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x10, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x12, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x54, 0x4c, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0xe8, 0x8c, 0x83,
	0xe5, 0x9b, 0xb4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4,
	0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe7, 0x9a, 0x84, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x2c, 0x2c,
	0x30, 0xe4, 0xb8, 0xba, 0xe6, 0xb0, 0xb8, 0xe7, 0xbb, 0xad, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98,
	0x52, 0x12, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x54, 0x4c,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x49, 0x44, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe8, 0x8c, 0x83, 0xe5,
	0x9b, 0xb4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe5, 0x99, 0xa8, 0x52,
	0x07, 0x49, 0x44, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x3a, 0x75, 0x92, 0x41, 0x72, 0x0a, 0x70, 0x2a,
	0x0f, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x32, 0x31, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x6d, 0x65, 0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe9, 0x83,
	0xa8, 0xe5, 0x88, 0x86, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4b,
	0x65, 0x79, 0xd2, 0x01, 0x10, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x07, 0x49, 0x44, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x22,
	0xc0, 0x02, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32,
	0x27, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x96, 0x87, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4,
	0xe5, 0x99, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0xae, 0x8c, 0xe6, 0x95, 0xb4, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x52, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x96, 0x87,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8,
	0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe5, 0x99, 0xa8, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x62,
	0x92, 0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x29, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0x6d, 0x65, 0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0xd2, 0x01, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0xd2, 0x01, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0xa7, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x32, 0x1e, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe8,
	0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0x52, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9,
	0x9a, 0x94, 0xe4, 0xb8, 0xad, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0xbf,
	0x87, 0xe6, 0xbb, 0xa4, 0xe5, 0x99, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x61, 0x0a, 0x10, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x5d, 0x92,
	0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x28, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x6d, 0x65,
	0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0x50, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0xd2, 0x01, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0xd2, 0x01,
	0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xaa, 0x04, 0x0a,
	0x17, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x07, 0x54, 0x54, 0x4c, 0x44,
	0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b,
	0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0xe4, 0xbf, 0x9d, 0xe7,
	0x95, 0x99, 0xe7, 0x9a, 0x84, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x54, 0x54, 0x4c,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe8, 0xae, 0xa1,
	0xe6, 0x95, 0xb0, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xe7,
	0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x52, 0x18, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x4f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32,
	0x1f, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0xbb, 0x9f,
	0xe8, 0xae, 0xa1, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x6e,
	0x12, 0x51, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x54, 0x4c, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0xe8, 0x8c, 0x83,
	0xe5, 0x9b, 0xb4, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe7, 0x9a, 0x84, 0xe5,
	0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x54, 0x4c, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x6c, 0x0a, 0x1d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32,
	0x21, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0x70, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0x52, 0x1d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x17, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x32, 0x2f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x6d, 0x65, 0x74, 0x61, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0xd2, 0x01, 0x14, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x54, 0x4c, 0x44, 0x61, 0x79, 0x73, 0x22, 0xeb, 0x06, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x69, 0x73, 0x55,
	0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe6,
	0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x52, 0x08, 0x52, 0x65, 0x64, 0x69, 0x73, 0x55, 0x52, 0x4c, 0x12, 0x89, 0x01,
	0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe5,
	0x85, 0x83, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x0f, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe9, 0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xe8,
	0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x32, 0x15, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe8, 0x8c, 0x83, 0xe5, 0x9b,
	0xb4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x32, 0x18, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x8a,
	0xe4, 0xb8, 0x8b, 0xe6, 0x96, 0x87, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x0c, 0x50,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7,
	0x9a, 0x84, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0c,
	0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x0f,
	0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x52, 0x0f, 0x50, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x12, 0x7b, 0x0a, 0x13,
	0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a,
	0x84, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x13, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37,
	0x2a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x10, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0x6d, 0x65, 0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x18, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x54, 0x4c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2a, 0x32, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x45, 0x4c, 0x46, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x54, 0x43, 0x44, 0x10, 0x02, 0x42, 0x14, 0x5a, 0x12, 0x2e,
	0x2f, 0x69, 0x74, 0x65, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x50, 0x43, 0x5f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescOnce sync.Once
	file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescData = file_pbschema_itemfilterRPC_metadatamodel_proto_rawDesc
)

func file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescGZIP() []byte {
	file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescOnce.Do(func() {
		file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescData)
	})
	return file_pbschema_itemfilterRPC_metadatamodel_proto_rawDescData
}

var file_pbschema_itemfilterRPC_metadatamodel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pbschema_itemfilterRPC_metadatamodel_proto_goTypes = []interface{}{
	(MetaDataStoreType)(0),          // 0: itemfilterRPC.MetaDataStoreType
	(*MetaMetaDataStoreConfig)(nil), // 1: itemfilterRPC.MetaMetaDataStoreConfig
	(*MetaBlacklistConfig)(nil),     // 2: itemfilterRPC.MetaBlacklistConfig
	(*MetaRangeConfig)(nil),         // 3: itemfilterRPC.MetaRangeConfig
	(*MetaContextConfig)(nil),       // 4: itemfilterRPC.MetaContextConfig
	(*MetaPickerConfig)(nil),        // 5: itemfilterRPC.MetaPickerConfig
	(*MetaPickerCounterConfig)(nil), // 6: itemfilterRPC.MetaPickerCounterConfig
	(*MetaInfo)(nil),                // 7: itemfilterRPC.MetaInfo
	nil,                             // 8: itemfilterRPC.MetaPickerConfig.FilterInfosEntry
	(*RedisFilterSetting)(nil),      // 9: itemfilterRPC.RedisFilterSetting
}
var file_pbschema_itemfilterRPC_metadatamodel_proto_depIdxs = []int32{
	0,  // 0: itemfilterRPC.MetaMetaDataStoreConfig.StoreType:type_name -> itemfilterRPC.MetaDataStoreType
	9,  // 1: itemfilterRPC.MetaContextConfig.DefaultSetting:type_name -> itemfilterRPC.RedisFilterSetting
	8,  // 2: itemfilterRPC.MetaPickerConfig.FilterInfos:type_name -> itemfilterRPC.MetaPickerConfig.FilterInfosEntry
	1,  // 3: itemfilterRPC.MetaInfo.MetaDataStoreConfig:type_name -> itemfilterRPC.MetaMetaDataStoreConfig
	2,  // 4: itemfilterRPC.MetaInfo.BlacklistConfig:type_name -> itemfilterRPC.MetaBlacklistConfig
	3,  // 5: itemfilterRPC.MetaInfo.RangeConfig:type_name -> itemfilterRPC.MetaRangeConfig
	4,  // 6: itemfilterRPC.MetaInfo.ContextConfig:type_name -> itemfilterRPC.MetaContextConfig
	5,  // 7: itemfilterRPC.MetaInfo.PickerConfig:type_name -> itemfilterRPC.MetaPickerConfig
	6,  // 8: itemfilterRPC.MetaInfo.PickerCounterConfig:type_name -> itemfilterRPC.MetaPickerCounterConfig
	9,  // 9: itemfilterRPC.MetaPickerConfig.FilterInfosEntry.value:type_name -> itemfilterRPC.RedisFilterSetting
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pbschema_itemfilterRPC_metadatamodel_proto_init() }
func file_pbschema_itemfilterRPC_metadatamodel_proto_init() {
	if File_pbschema_itemfilterRPC_metadatamodel_proto != nil {
		return
	}
	file_pbschema_itemfilterRPC_universal_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaMetaDataStoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaBlacklistConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaRangeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaContextConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaPickerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaPickerCounterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbschema_itemfilterRPC_metadatamodel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbschema_itemfilterRPC_metadatamodel_proto_goTypes,
		DependencyIndexes: file_pbschema_itemfilterRPC_metadatamodel_proto_depIdxs,
		EnumInfos:         file_pbschema_itemfilterRPC_metadatamodel_proto_enumTypes,
		MessageInfos:      file_pbschema_itemfilterRPC_metadatamodel_proto_msgTypes,
	}.Build()
	File_pbschema_itemfilterRPC_metadatamodel_proto = out.File
	file_pbschema_itemfilterRPC_metadatamodel_proto_rawDesc = nil
	file_pbschema_itemfilterRPC_metadatamodel_proto_goTypes = nil
	file_pbschema_itemfilterRPC_metadatamodel_proto_depIdxs = nil
}
